import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';

class Usermng extends StatefulWidget {
  const Usermng({super.key});

  @override
  State<Usermng> createState() => _UsermngState();
}

class _UsermngState extends State<Usermng> {
  final TextEditingController _searchController = TextEditingController();
  String _searchQuery = "";

  Future<void> _addTenant(Map<String, dynamic> tenantData) async {
    int roomNumber = tenantData['roomNumber'];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
    var roomDoc = await FirebaseFirestore.instance
        .collection('rooms')
        .where('roomNumber', isEqualTo: roomNumber)
        .get();

    if (roomDoc.docs.isEmpty) {
      // ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
      showDialog(
        context: context,
        builder: (context) {
          return Center( // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: 1000), // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
              child: AlertDialog(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                title: const Text(
                  '‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
                content: const Text(
                  '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
                  style: TextStyle(fontSize: 18),
                ),
                actionsAlignment: MainAxisAlignment.center,
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    style: TextButton.styleFrom(
                      foregroundColor: Colors.white,
                      backgroundColor: Colors.redAccent,
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('‡∏õ‡∏¥‡∏î', style: TextStyle(fontSize: 16)),
                  ),
                ],
              ),
            ),
          );
        },
      );
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    var existingTenant = await FirebaseFirestore.instance
        .collection('tenants')
        .where('roomNumber', isEqualTo: roomNumber)
        .get();

    if (existingTenant.docs.isNotEmpty) { // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥
      showDialog(
        context: context,
        builder: (context) {
          return Center( // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: 1000), // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
              child: AlertDialog(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                title: const Text(
                  '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
                  style: TextStyle(fontSize: 22, fontWeight: FontWeight.bold),
                ),
                content: const Text(
                  '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
                  style: TextStyle(fontSize: 18),
                ),
                actionsAlignment: MainAxisAlignment.center,
                actions: [
                  TextButton(
                    onPressed: () => Navigator.pop(context),
                    style: TextButton.styleFrom(
                      foregroundColor: Colors.white,
                      backgroundColor: Colors.redAccent,
                      padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text('‡∏õ‡∏¥‡∏î', style: TextStyle(fontSize: 16)),
                  ),
                ],
              ),
            ),
          );
        },
      );
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤
    var docRef = await FirebaseFirestore.instance.collection('tenants').add({
      ...tenantData,
      'timestamp': FieldValue.serverTimestamp(),  // Add timestamp
    });

    String tenantID = docRef.id;

    await docRef.update({'tenantID': tenantID});

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á
    String roomId = roomDoc.docs.first.id;

    await FirebaseFirestore.instance.collection('rooms').doc(roomId).update({
      'tenantID': tenantID,
      'room_status': '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á',
    });

    await FirebaseFirestore.instance.collection('tenants').doc(tenantID).update({
      'roomID': roomId,
    });
  }

  Future<void> _updateTenant(String tenantId, Map<String, dynamic> updatedData) async {
    await FirebaseFirestore.instance.collection('tenants').doc(tenantId).update(updatedData);
  }

  void _showAddOrEditTenantDialog({Map<String, dynamic>? tenantData, String? tenantId}) {
    String newTenantName = tenantData?['T_name'] ?? '';
    String newTenantRoom = tenantData?['roomNumber']?.toString() ?? '';
    String newTenantStartDate = tenantData?['start_date'] ?? '';
    String newTenantEndDate = tenantData?['end_date'] ?? '';
    String newTenantPhone = tenantData?['phone'] ?? '';
    String tenantStatus = tenantData?['status'] ?? 'Active';

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(tenantData == null ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤' : '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                _buildTextField((value) => newTenantName = value, '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤', initialValue: newTenantName),
                _buildTextField((value) => newTenantStartDate = value, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡πà‡∏≤', initialValue: newTenantStartDate),
                _buildTextField((value) => newTenantEndDate = value, '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤', initialValue: newTenantEndDate),
                _buildTextField((value) => newTenantPhone = value, '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', initialValue: newTenantPhone),
                _buildTextField((value) => newTenantRoom = value, '‡∏´‡πâ‡∏≠‡∏á', initialValue: newTenantRoom),
                const SizedBox(height: 10),
                DropdownButtonFormField<String>(
                  value: tenantStatus,
                  decoration: const InputDecoration(labelText: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤'),
                  items: ['Active', 'Inactive'].map((String value) {
                    return DropdownMenuItem<String>(value: value, child: Text(value));
                  }).toList(),
                  onChanged: (value) {
                    if (value != null) tenantStatus = value;
                  },
                ),
              ],
            ),
          ),
          actions: [
            TextButton(onPressed: () => Navigator.pop(context), child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')),
            ElevatedButton(
              onPressed: () {
                final tenantData = {
                  'T_name': newTenantName,
                  'roomNumber': int.parse(newTenantRoom),
                  'start_date': newTenantStartDate,
                  'end_date': newTenantEndDate,
                  'phone': newTenantPhone,
                  'status': tenantStatus,
                };

                if (tenantId == null) {
                  _addTenant(tenantData);
                } else {
                  _updateTenant(tenantId, tenantData);
                }

                Navigator.pop(context);
              },
              child: Text(tenantData == null ? '‡πÄ‡∏û‡∏¥‡πà‡∏°' : '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'),
            ),
          ],
        );
      },
    );
  }

  Widget _buildTextField(Function(String) onChanged, String label, {String? initialValue}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: TextField(
        controller: TextEditingController(text: initialValue),
        decoration: InputDecoration(labelText: label),
        onChanged: onChanged,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.only(top: 20.0, left: 0.0, right: 20.0, bottom: 20.0),
        child: Column(
          children: [
            Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _searchController,
                    decoration: InputDecoration(
                      labelText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8), // Replace üòé with 8
                      ),
                    ),
                    onChanged: (value) {
                      setState(() {
                        _searchQuery = value;
                      });
                    },
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton.icon(
                  onPressed: () {
                    _showAddOrEditTenantDialog();
                  },
                  icon: const Icon(Icons.add),
                  label: const Text('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blueAccent,
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 20),
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('tenants')
                    .orderBy('timestamp', descending: false)  // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(child: CircularProgressIndicator());
                  }
                  if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  }

                  var tenants = snapshot.data?.docs ?? [];
                  if (_searchQuery.isNotEmpty) {
                    tenants = tenants.where((doc) {
                      var data = doc.data() as Map<String, dynamic>? ?? {};
                      return (data['T_name']?.toString().contains(_searchQuery) ?? false) ||
                             (data['phone']?.toString().contains(_searchQuery) ?? false) ||
                             (data['roomNumber']?.toString().contains(_searchQuery) ?? false);
                    }).toList();
                  }

                  return Container(
                    width: double.infinity,
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.black26),
                      borderRadius: BorderRadius.circular(8), // Replace üòé with 8
                    ),
                    child: SingleChildScrollView(
                      child: DataTable(
                        columnSpacing: 20,
                        columns: const [
                          DataColumn(label: Text('‡∏•‡∏≥‡∏î‡∏±‡∏ö', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏´‡πâ‡∏≠‡∏á', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', style: TextStyle(fontSize: 15))),
                          DataColumn(label: Text('‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£', style: TextStyle(fontSize: 15))),
                        ],
                        rows: List.generate(tenants.length, (index) {
                          var tenantDoc = tenants[index];
                          var tenant = tenantDoc.data() as Map<String, dynamic>? ?? {};

                          return DataRow(cells: [
                            DataCell(Text((index + 1).toString())),
                            DataCell(Text(tenant['T_name'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')),
                            DataCell(Text(tenant['start_date'] ?? '-')),
                            DataCell(Text(tenant['end_date'] ?? '-')),
                            DataCell(Text(tenant['phone'] ?? '-')),
                            DataCell(Text(tenant['roomNumber'].toString())),
                            DataCell(Text(tenant['status'] ?? '-')),
                            DataCell(Row(
                              children: [
                                IconButton(
                                  icon: const Icon(Icons.edit, color: Colors.blueAccent),
                                  onPressed: () {
                                    _showAddOrEditTenantDialog(
                                      tenantData: tenant,
                                      tenantId: tenantDoc.id,
                                    );
                                  },
                                ),
                                IconButton(
                                  icon: const Icon(Icons.delete, color: Colors.red),
                                  onPressed: () {
                                    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö
                                    showDialog(
                                      context: context,
                                      builder: (BuildContext context) {
                                        return AlertDialog(
                                          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'),
                                          content: const Text('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ?'),
                                          actions: [
                                            TextButton(
                                              onPressed: () {
                                                Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Dialog
                                              },
                                              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                                            ),
                                            TextButton(
                                              onPressed: () {
                                                // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore
                                                FirebaseFirestore.instance
                                                    .collection('tenants')
                                                    .doc(tenantDoc.id)
                                                    .delete()
                                                    .then((_) {
                                                      Navigator.pop(context); // ‡∏õ‡∏¥‡∏î Dialog ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                                                    }).catchError((error) {
                                                      print("Error deleting tenant: $error");
                                                    });
                                              },
                                              child: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'),
                                            ),
                                          ],
                                        );
                                      },
                                    );
                                  },
                                ),
                              ],
                            )),
                          ]);
                        }),
                      ),
                    ),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
